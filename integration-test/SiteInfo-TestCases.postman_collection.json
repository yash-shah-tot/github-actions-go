{
	"info": {
		"_postman_id": "19e9b00a-4131-4cd1-bb08-048e94a812cb",
		"name": "SiteInfo-TestCases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25209255"
	},
	"item": [
		{
			"name": "Retailers",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "POST Retailer Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if (pm.response.code == 401) {",
															"    console.log(\"Please try again with updated Bearer token\");",
															"    throw new Error('Please try again with updated Bearer token');",
															"} else {",
															"    pm.test(\"Status code is 400\", function () {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    pm.test(\"Body is correct\", function () {",
															"        pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID]\\\"]}\");",
															"    });",
															"",
															"    pm.test(\"Content-Type is present\", function () {",
															"        pm.response.to.have.header(\"Content-Type\");",
															"    });",
															"",
															"    pm.collectionVariables.unset(\"page_token\");",
															"    pm.collectionVariables.unset(\"page_token_2\");",
															"    pm.collectionVariables.unset(\"page_token_3\");",
															"    pm.collectionVariables.unset(\"retailer_name\");",
															"    pm.collectionVariables.unset(\"retailer_id\");",
															"    pm.collectionVariables.unset(\"post_etag\");",
															"    pm.collectionVariables.unset(\"get_etag\");",
															"    pm.collectionVariables.unset(\"patch_etag\");",
															"    pm.collectionVariables.unset(\"delete_etag\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "abc",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "No POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"EOF\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Empty JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"Empty JSON received, please input valid JSON in body\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"invalid character 'n' looking for beginning of object key string\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    name: invalid\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disallowed Fields in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request body validation failed\\\",\\\"errors\\\":[\\\"Key: 'Retailer.ID' Error:Field validation for 'ID' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.CreatedBy' Error:Field validation for 'CreatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.UpdatedBy' Error:Field validation for 'UpdatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.DeactivatedBy' Error:Field validation for 'DeactivatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.CreatedTime' Error:Field validation for 'CreatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.UpdatedTime' Error:Field validation for 'UpdatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.DeactivatedTime' Error:Field validation for 'DeactivatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.ETag' Error:Field validation for 'ETag' failed on the 'disallowed' tag\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"retailer_id\",\n    \"name\": \"retailer_name\",\n    \"created_by\": \"test\",\n    \"updated_by\": \"test\",\n    \"deactivated_by\": \"test\",\n    \"created_time\": \"{{$isoTimestamp}}\",\n    \"updated_time\": \"{{$isoTimestamp}}\",\n    \"deactivated_time\": \"{{$isoTimestamp}}\",\n    \"etag\": \"etag\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create retailer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Last-Modified is present\", function () {",
															"    pm.response.to.have.header(\"Last-Modified\");",
															"});",
															"",
															"pm.test(\"Location is present\", function () {",
															"    pm.response.to.have.header(\"Location\");",
															"});",
															"",
															"let locationHeader = pm.response.headers.get('location').split('/')",
															"",
															"pm.collectionVariables.set(\"retailer_id\", locationHeader[2]);",
															"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
															"",
															"pm.collectionVariables.unset(\"page_token\");",
															"pm.collectionVariables.unset(\"page_token_2\");",
															"pm.collectionVariables.unset(\"page_token_3\");",
															"pm.collectionVariables.unset(\"retailer_name\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "GET Retailer Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "default",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/r12345",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/r12345",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "abc",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/r12345",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID path param not present",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"}); ",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}",
													"host": [
														"{{GET Retailer URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID invalid not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/invalid",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"invalid"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/invalid",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"invalid"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Retailer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Response body validation\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
															"    const created_time = jsonData.created_time;",
															"    const updated_time = jsonData.updated_time;",
															"    const Today = new Date();",
															"    const TodayISO = Today.toISOString().split('T')[0]",
															"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(jsonData.created_by).not.to.be.empty;",
															"    pm.expect(jsonData.updated_time).not.to.be.empty;",
															"    pm.expect(jsonData.name).not.to.be.empty;",
															"});",
															"",
															"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
															"pm.collectionVariables.set(\"retailer_name\", pm.response.json().name);",
															"",
															"",
															"",
															"",
															"pm.test(\"Validate POST and GET Etag are equal\", function () {",
															"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"post_etag\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"{{retailer_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "GET Retailers Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "vOne",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "invalid",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU=",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "200",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header -ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "-5",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "page_size",
														"value": "2"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Retailers",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var retailers = pm.response.json();",
															"    var found = false",
															"    for (var i = 0; i < retailers.length; i++) { ",
															"        if (retailers[i].id == pm.collectionVariables.get(\"retailer_id\")){",
															"            found = true",
															"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"post_etag\"));",
															"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
															"            pm.expect(retailers[i].id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
															"            const created_time = retailers[i].created_time;",
															"            const updated_time = retailers[i].updated_time;",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(retailers[i].created_by).not.to.be.empty;",
															"            pm.expect(retailers[i].updated_time).not.to.be.empty;",
															"            pm.expect(retailers[i].name).not.to.be.empty;",
															"            pm.expect(retailers[i].etag).not.to.be.empty;",
															"            console.log(\"Found\")",
															"            break;",
															"        } else {",
															"            found = false",
															"        }",
															"    }",
															"    if (!found) {",
															"        postman.setNextRequest(\"3 Get Retailers\")",
															"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "10",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "{{page_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "PATCH Retailer Validation Scenarios",
									"item": [
										{
											"name": "Request headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "ab",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID path param not present",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [If-Match]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Retailer URL}}",
													"host": [
														"{{PATCH Retailer URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "No PATCH body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"EOF\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Empty JSON in PATCH body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"Empty JSON received, please input valid JSON in body\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid JSON in PATCH body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"invalid character 'n' looking for beginning of object key string\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    name: invalid\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disallowed Fields JSON in PATCH body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request body validation failed\\\",\\\"errors\\\":[\\\"Key: 'Retailer.ID' Error:Field validation for 'ID' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.CreatedBy' Error:Field validation for 'CreatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.UpdatedBy' Error:Field validation for 'UpdatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.DeactivatedBy' Error:Field validation for 'DeactivatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.CreatedTime' Error:Field validation for 'CreatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.UpdatedTime' Error:Field validation for 'UpdatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.DeactivatedTime' Error:Field validation for 'DeactivatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Retailer.ETag' Error:Field validation for 'ETag' failed on the 'disallowed' tag\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"retailer_id\",\n    \"name\": \"retailer_name\",\n    \"created_by\": \"test\",\n    \"updated_by\": \"test\",\n    \"deactivated_by\": \"test\",\n    \"created_time\": \"{{$isoTimestamp}}\",\n    \"updated_time\": \"{{$isoTimestamp}}\",\n    \"deactivated_time\": \"{{$isoTimestamp}}\",\n    \"etag\": \"etag\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID r12345 not found\\\"}\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"retailer_name\"\n}"
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "If-Match",
														"value": "abcd"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"retailer_name\"\n}"
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "PATCH Retailer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body validation\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
															"    const created_time = jsonData.created_time;",
															"    const updated_time = jsonData.updated_time;",
															"    const Today = new Date();",
															"    const TodayISO = Today.toISOString().split('T')[0]",
															"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(jsonData.created_by).not.to.be.empty;",
															"    pm.expect(jsonData.updated_time).not.to.be.empty;",
															"    pm.expect(jsonData.name).not.to.be.empty;",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"",
															"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "If-Match",
														"value": "{{get_etag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/{{retailer_id}}",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"{{retailer_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Deactivate",
							"item": [
								{
									"name": "Deactivate Retailer Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "abc",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID path param not present",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [If-Match]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}",
													"host": [
														"{{POST Retailer deactivate URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer status param not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [If-Match]\\\",\\\"Invalid request url path, no matching path params found in path : /retailers/r12345\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID does not exist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID r12345 does not exist\\\"}\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "If-Match",
														"value": "invalid",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "If-Match",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{Patch Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{Patch Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Deactivate Retailer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.collectionVariables.set(\"delete_etag\", pm.response.headers.get('etag'));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "If-Match",
														"value": "{{patch_etag}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/{{retailer_id}}:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"{{retailer_id}}:deactivate"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Audit",
							"item": [
								{
									"name": "GET Retailer Audit Validation Scenarios",
									"item": [
										{
											"name": "Required headers and path param absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}",
													"host": [
														"{{GET Retailer Audit URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/r12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"r12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "v3",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "invalid",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU=",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header -ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "-5",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "200",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "page_size",
														"value": "2"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Retailer Audit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var jsonData = pm.response.json();",
															"    var end = false",
															"    if (jsonData.length == 0 || pm.response.headers.get('next_page_token') == undefined){",
															"        end = true",
															"    } else {",
															"        for (var i = 0; i < jsonData.length; i++) { ",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(jsonData[i].changed_at.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(['create','update','deactivate']).contains(jsonData[i].change_type)",
															"        }",
															"    }",
															"    if (!end) {",
															"        postman.setNextRequest(\"18 Get Retailer Audit\")",
															"        pm.collectionVariables.set(\"audit_page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"audit_page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"audit_page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "page_size",
														"value": "2",
														"type": "text"
													},
													{
														"key": "page_token",
														"value": "{{audit_page_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/{{retailer_id}}/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"{{retailer_id}}",
														"auditLogs"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Retailer Lifecycle Validation",
							"item": [
								{
									"name": "1 Create Retailer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"retailer_id\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"retailer_name\");",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Get Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
													"pm.collectionVariables.set(\"retailer_name\", pm.response.json().name);",
													"",
													"",
													"",
													"",
													"pm.test(\"Validate POST and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"post_etag\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{GET Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Get Retailers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var retailers = pm.response.json();",
													"    var found = false",
													"    for (var i = 0; i < retailers.length; i++) { ",
													"        if (retailers[i].id == pm.collectionVariables.get(\"retailer_id\")){",
													"            found = true",
													"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"post_etag\"));",
													"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
													"            pm.expect(retailers[i].id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"            const created_time = retailers[i].created_time;",
													"            const updated_time = retailers[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(retailers[i].created_by).not.to.be.empty;",
													"            pm.expect(retailers[i].updated_time).not.to.be.empty;",
													"            pm.expect(retailers[i].name).not.to.be.empty;",
													"            pm.expect(retailers[i].etag).not.to.be.empty;",
													"            console.log(\"Found\")",
													"            break;",
													"        } else {",
													"            found = false",
													"        }",
													"    }",
													"    if (!found) {",
													"        postman.setNextRequest(\"3 Get Retailers\")",
													"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "page_size",
												"value": "10",
												"type": "text"
											},
											{
												"key": "page_token",
												"value": "{{page_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Create Retailer With Same Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{retailer_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 PATCH Retailer With Same Name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{get_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{retailer_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{PATCH Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 PATCH Retailer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{get_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{PATCH Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Get Retailer After Patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
													"pm.collectionVariables.set(\"retailer_name\", pm.response.json().name);",
													"",
													"",
													"",
													"pm.test(\"Validate PATCH and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"patch_etag\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{GET Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8 Get Retailers After Patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var retailers = pm.response.json();",
													"    var found = false",
													"    for (var i = 0; i < retailers.length; i++) { ",
													"        if (retailers[i].id == pm.collectionVariables.get(\"retailer_id\")){",
													"            found = true",
													"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"patch_etag\"));",
													"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
													"            pm.expect(retailers[i].id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"            const created_time = retailers[i].created_time;",
													"            const updated_time = retailers[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(retailers[i].created_by).not.to.be.empty;",
													"            pm.expect(retailers[i].updated_time).not.to.be.empty;",
													"            pm.expect(retailers[i].name).not.to.be.empty;",
													"            pm.expect(retailers[i].etag).not.to.be.empty;",
													"            console.log(\"Found\")",
													"            break;",
													"        } else {",
													"            found = false",
													"        }",
													"    }",
													"    if (!found) {",
													"        postman.setNextRequest(\"8 Get Retailers After Patch\")",
													"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "page_size",
												"value": "10",
												"type": "text"
											},
											{
												"key": "page_token",
												"value": "{{page_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "9 Deactivate Retailer invalid etag",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 412\", function () {",
													"    pm.response.to.have.status(412);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"pm.test(\"Body is correct\", function () {",
													"    pm.response.to.have.body(\"{\\\"code\\\":412,\\\"message\\\":\\\"If-Match header value incorrect, please get the latest and try again\\\"}\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "invalid",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{POST Retailer deactivate URL}}/retailers/{{retailer_id}}:deactivate",
											"host": [
												"{{POST Retailer deactivate URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}:deactivate"
											]
										}
									},
									"response": []
								},
								{
									"name": "10 DELETE Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Body is correct\", function () {",
													"    var body = `{\"code\":200,\"message\":\"Retailer `+pm.collectionVariables.get(\"retailer_id\")+` deactivated successfully\"}`",
													"    console.log(body)",
													"    pm.response.to.contains.body(body);",
													"});",
													"",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.collectionVariables.set(\"delete_etag\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{get_etag}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{POST Retailer deactivate URL}}/retailers/{{retailer_id}}:deactivate",
											"host": [
												"{{POST Retailer deactivate URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}:deactivate"
											]
										}
									},
									"response": []
								},
								{
									"name": "11 PATCH After delete",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"not found\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{delete_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{PATCH Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12 Get Retailer after delete with deleted=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"retailer_id\"));",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    var Future = new Date(Date.now());",
													"    Future.setDate(Future.getDate() + 90);",
													"    const FutureISO = Future.toISOString().split('T')[0]",
													"    pm.expect(jsonData.created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.deactivated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_by).not.to.be.empty;",
													"    pm.expect(jsonData.deactivated_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"    pm.expect(jsonData.deactivated_time).not.to.be.empty;",
													"});",
													"",
													"pm.test(\"Validate DELETE and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"delete_etag\")).to.eql(pm.response.headers.get('etag'));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}?deactivated=true",
											"host": [
												"{{GET Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											],
											"query": [
												{
													"key": "deactivated",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "13 Retailer ID does not exist after delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"does not exist\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{delete_etag}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{POST Retailer deactivate URL}}/retailers/{{retailer_id}}:deactivate",
											"host": [
												"{{POST Retailer deactivate URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}:deactivate"
											]
										}
									},
									"response": []
								},
								{
									"name": "14 Get Retailer after delete no query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}",
											"host": [
												"{{GET Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "15 Get Retailer after delete with deleted=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"retailer_id\"));",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    var Future = new Date(Date.now());",
													"    Future.setDate(Future.getDate() + 90);",
													"    const FutureISO = Future.toISOString().split('T')[0]",
													"    pm.expect(jsonData.created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.deactivated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_by).not.to.be.empty;",
													"    pm.expect(jsonData.deactivated_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"    pm.expect(jsonData.deactivated_time).not.to.be.empty;",
													"",
													"});",
													"",
													"pm.test(\"Validate DELETE and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"delete_etag\")).to.eql(pm.response.headers.get('etag'));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer URL}}/retailers/{{retailer_id}}?deactivated=true",
											"host": [
												"{{GET Retailer URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}"
											],
											"query": [
												{
													"key": "deactivated",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "16 Get Retailers after delete no query param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var retailers = pm.response.json();",
													"    var found = false",
													"    var end = false",
													"    if (retailers.length == 0 || !pm.response.headers.has('next_page_token') ){",
													"        console.log(\"Reached End\");",
													"        end = true",
													"    }",
													"    for (var i = 0; i < retailers.length; i++) { ",
													"        if (retailers[i].id == pm.collectionVariables.get(\"retailer_id\")){",
													"            found = true",
													"            break;",
													"        } else {",
													"            found = false",
													"        }",
													"    }",
													"    pm.expect(found).to.equal(false);",
													"    if (!end) {",
													"        postman.setNextRequest(\"16 Get Retailers after delete no query param\")",
													"        pm.collectionVariables.set(\"page_token_2\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token_2\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token_2\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "page_size",
												"value": "10",
												"type": "text"
											},
											{
												"key": "page_token",
												"value": "{{page_token_2}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "17 Get Retailers after delete with deleted=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var retailers = pm.response.json();",
													"    var found = false",
													"    for (var i = 0; i < retailers.length; i++) { ",
													"        if (retailers[i].id == pm.collectionVariables.get(\"retailer_id\")){",
													"            found = true",
													"            pm.expect(retailers[i].id).to.eql(pm.collectionVariables.get(\"retailer_id\"));",
													"            pm.expect(retailers[i].etag).to.eql(pm.collectionVariables.get(\"delete_etag\"));",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            var Future = new Date(Date.now());",
													"            Future.setDate(Future.getDate() + 90);",
													"            const FutureISO = Future.toISOString().split('T')[0]",
													"            pm.expect(retailers[i].created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(retailers[i].updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(retailers[i].deactivated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(retailers[i].created_by).not.to.be.empty;",
													"            pm.expect(retailers[i].updated_by).not.to.be.empty;",
													"            pm.expect(retailers[i].deactivated_by).not.to.be.empty;",
													"            pm.expect(retailers[i].updated_time).not.to.be.empty;",
													"            pm.expect(retailers[i].name).not.to.be.empty;",
													"            pm.expect(retailers[i].deactivated_time).not.to.be.empty;",
													"            pm.expect(retailers[i].etag).not.to.be.empty;",
													"            console.log(\"Found\")",
													"            break;",
													"        } else {",
													"            found = false",
													"        }",
													"    }",
													"    if (!found) {",
													"        postman.setNextRequest(\"17 Get Retailers after delete with deleted=true\")",
													"        pm.collectionVariables.set(\"page_token_3\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token_3\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token_3\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "page_size",
												"value": "10",
												"type": "text"
											},
											{
												"key": "page_token",
												"value": "{{page_token_3}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers?deactivated=true",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											],
											"query": [
												{
													"key": "deactivated",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "18 Get Retailer Audit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var jsonData = pm.response.json();",
													"    var end = false",
													"    if (jsonData.length == 0 || pm.response.headers.get('next_page_token') == undefined){",
													"        end = true",
													"    } else {",
													"        for (var i = 0; i < jsonData.length; i++) { ",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(jsonData[i].changed_at.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(['create','update','deactivate']).contains(jsonData[i].change_type)",
													"        }",
													"    }",
													"    if (!end) {",
													"        postman.setNextRequest(\"18 Get Retailer Audit\")",
													"        pm.collectionVariables.set(\"audit_page_token\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"audit_page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"audit_page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "page_size",
												"value": "2",
												"type": "text"
											},
											{
												"key": "page_token",
												"value": "{{audit_page_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailer Audit URL}}/retailers/{{retailer_id}}/auditLogs",
											"host": [
												"{{GET Retailer Audit URL}}"
											],
											"path": [
												"retailers",
												"{{retailer_id}}",
												"auditLogs"
											]
										}
									},
									"response": []
								},
								{
									"name": "19 END unset all environment variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"audit_page_token\");",
													"pm.collectionVariables.unset(\"retailer_name\");",
													"pm.collectionVariables.unset(\"retailer_id\");",
													"pm.collectionVariables.unset(\"post_etag\");",
													"pm.collectionVariables.unset(\"get_etag\");",
													"pm.collectionVariables.unset(\"patch_etag\");",
													"pm.collectionVariables.unset(\"delete_etag\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"API_VERSION\",\"v1\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "v2",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "POST Retailer Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer URL}}/retailers",
													"host": [
														"{{POST Retailer URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": []
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "GET Retailer Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer URL}}/retailers/r12345",
													"host": [
														"{{GET Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": []
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "GET Retailers Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailers URL}}/retailers",
													"host": [
														"{{GET Retailers URL}}"
													],
													"path": [
														"retailers"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": []
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "PATCH Retailer Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Retailer URL}}/retailers/r12345",
													"host": [
														"{{PATCH Retailer URL}}"
													],
													"path": [
														"retailers",
														"r12345"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Deactivate",
							"item": [
								{
									"name": "Deactivate Retailer Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Retailer deactivate URL}}/retailers/r12345:deactivate",
													"host": [
														"{{POST Retailer deactivate URL}}"
													],
													"path": [
														"retailers",
														"r12345:deactivate"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": []
								}
							]
						},
						{
							"name": "Get Audit",
							"item": [
								{
									"name": "GET Retailer Audit Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Retailer Audit URL}}/retailers/12345/auditLogs",
													"host": [
														"{{GET Retailer Audit URL}}"
													],
													"path": [
														"retailers",
														"12345",
														"auditLogs"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"API_VERSION\",\"v2\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Sites",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "Pre test",
							"item": [
								{
									"name": "1 Create Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if (pm.response.code == 401) {",
													"    console.log(\"Please try again with updated Bearer token\");",
													"    throw new Error('Please try again with updated Bearer token');",
													"} else {",
													"    pm.test(\"Status code is 201\", function () {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Content-Type is present\", function () {",
													"        pm.response.to.have.header(\"Content-Type\");",
													"    });",
													"",
													"    pm.test(\"ETag is present\", function () {",
													"        pm.response.to.have.header(\"ETag\");",
													"    });",
													"",
													"    pm.test(\"X-Correlation-ID is present\", function () {",
													"        pm.response.to.have.header(\"X-Correlation-ID\");",
													"    });",
													"",
													"    pm.test(\"Last-Modified is present\", function () {",
													"        pm.response.to.have.header(\"Last-Modified\");",
													"    });",
													"",
													"    pm.test(\"Location is present\", function () {",
													"        pm.response.to.have.header(\"Location\");",
													"    });",
													"",
													"    let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"    pm.collectionVariables.set(\"new_retailer_id\", locationHeader[2]);",
													"",
													"    pm.collectionVariables.unset(\"page_token\");",
													"    pm.collectionVariables.unset(\"page_token_2\");",
													"    pm.collectionVariables.unset(\"page_token_3\");",
													"    pm.collectionVariables.unset(\"retailer_name\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Create site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"new_site_id\", locationHeader[2]);",
													"pm.collectionVariables.set(\"new_site_etag\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{new_retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "POST Site Validaton Scenario",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.collectionVariables.unset(\"page_token\");",
															"pm.collectionVariables.unset(\"page_token_2\");",
															"pm.collectionVariables.unset(\"page_token_3\");",
															"pm.collectionVariables.unset(\"retailer_name\");",
															"pm.collectionVariables.unset(\"retailer_id\");",
															"pm.collectionVariables.unset(\"post_etag\");",
															"pm.collectionVariables.unset(\"get_etag\");",
															"pm.collectionVariables.unset(\"patch_etag\");",
															"pm.collectionVariables.unset(\"delete_etag\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "No matching path param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Site URL}}",
													"host": [
														"{{POST Site URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID missing in header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "No POST Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"EOF\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Empty JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"Empty JSON received, please input valid JSON in body\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"invalid character 'n' looking for beginning of object key string\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    name: invalid\n}"
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disallowed Fields in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request body validation failed\\\",\\\"errors\\\":[\\\"Key: 'Site.ID' Error:Field validation for 'ID' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.CreatedBy' Error:Field validation for 'CreatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.UpdatedBy' Error:Field validation for 'UpdatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.DeactivatedBy' Error:Field validation for 'DeactivatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.CreatedTime' Error:Field validation for 'CreatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.UpdatedTime' Error:Field validation for 'UpdatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.DeactivatedTime' Error:Field validation for 'DeactivatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.ETag' Error:Field validation for 'ETag' failed on the 'disallowed' tag\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"retailer_id\",\n    \"name\": \"site_name\",\n    \"retailer_site_id\" : \"test\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    },\n    \"created_by\": \"test\",\n    \"updated_by\": \"test\",\n    \"deactivated_by\": \"test\",\n    \"created_time\": \"{{$isoTimestamp}}\",\n    \"updated_time\": \"{{$isoTimestamp}}\",\n    \"deactivated_time\": \"{{$isoTimestamp}}\",\n    \"etag\": \"etag\"\n}"
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid retailer ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Incorrect value for header retailer_id\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "invalid",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"retailer_site_id\" : \"test\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Last-Modified is present\", function () {",
															"    pm.response.to.have.header(\"Last-Modified\");",
															"});",
															"",
															"pm.test(\"Location is present\", function () {",
															"    pm.response.to.have.header(\"Location\");",
															"});",
															"",
															"let locationHeader = pm.response.headers.get('location').split('/')",
															"",
															"pm.collectionVariables.set(\"site_id\", locationHeader[2]);",
															"pm.collectionVariables.set(\"site_etag\", pm.response.headers.get('etag'));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "GET Site Validation scenarios",
									"item": [
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "No Matching Path Params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}",
													"host": [
														"{{GET Site URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "retailer_id",
														"value": "r485sh",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"not found\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Response body validation\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"site_id\"));",
															"    const created_time = jsonData.created_time;",
															"    const updated_time = jsonData.updated_time;",
															"    const Today = new Date();",
															"    const TodayISO = Today.toISOString().split('T')[0]",
															"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(jsonData.created_by).not.to.be.empty;",
															"    pm.expect(jsonData.updated_time).not.to.be.empty;",
															"    pm.expect(jsonData.name).not.to.be.empty;",
															"});",
															"",
															"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
															"pm.collectionVariables.set(\"site_name\", pm.response.json().name);",
															"",
															"",
															"",
															"",
															"pm.test(\"Validate POST and GET Etag are equal\", function () {",
															"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"site_etag\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/{{site_id}}",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														},
														{
															"key": "",
															"value": "",
															"disabled": true
														},
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "GET Sites Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "",
														"value": "",
														"type": "default",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Page_size header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalide base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU=",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "200",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header -ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "-10",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_size",
														"value": "2"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Sites",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var sites = pm.response.json();",
															"    var found = false",
															"    for (var i = 0; i < sites.length; i++) { ",
															"        if (sites[i].id == pm.collectionVariables.get(\"site_id\")){",
															"            found = true",
															"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"site_etag\"));",
															"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
															"            pm.expect(sites[i].id).to.eql(pm.collectionVariables.get(\"site_id\"));",
															"            const created_time = sites[i].created_time;",
															"            const updated_time = sites[i].updated_time;",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(sites[i].created_by).not.to.be.empty;",
															"            pm.expect(sites[i].updated_time).not.to.be.empty;",
															"            pm.expect(sites[i].name).not.to.be.empty;",
															"            pm.expect(sites[i].etag).not.to.be.empty;",
															"            console.log(\"Found\")",
															"            break;",
															"        } else {",
															"            found = false",
															"        }",
															"    }",
															"    if (!found) {",
															"        postman.setNextRequest(\"Get Sites\")",
															"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "PATCH Site Validation Scenarios",
									"item": [
										{
											"name": "Request headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "No matching path params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id If-Match]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site URL}}",
													"host": [
														"{{PATCH Site URL}}"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "",
														"value": "",
														"type": "default",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID header not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "No PATCH body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"EOF\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Empty JSON in PATCH body Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"Empty JSON received, please input valid JSON in body\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid JSON in PATCH body Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"invalid character 'n' looking for beginning of object key string\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    name: invalid\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disallowed Fields JSON in PATCH body Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request body validation failed\\\",\\\"errors\\\":[\\\"Key: 'Site.ID' Error:Field validation for 'ID' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.CreatedBy' Error:Field validation for 'CreatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.UpdatedBy' Error:Field validation for 'UpdatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.DeactivatedBy' Error:Field validation for 'DeactivatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.CreatedTime' Error:Field validation for 'CreatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.UpdatedTime' Error:Field validation for 'UpdatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.DeactivatedTime' Error:Field validation for 'DeactivatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Site.ETag' Error:Field validation for 'ETag' failed on the 'disallowed' tag\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"site_id\",\n    \"name\": \"site_name\",\n    \"created_by\": \"test\",\n    \"updated_by\": \"test\",\n    \"deactivated_by\": \"test\",\n    \"created_time\": \"{{$isoTimestamp}}\",\n    \"updated_time\": \"{{$isoTimestamp}}\",\n    \"deactivated_time\": \"{{$isoTimestamp}}\",\n    \"etag\": \"etag\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"retailer_name\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "If-Match",
														"value": "abcd"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"retailer_name\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "8  Patch site name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{get_etag}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site URL}}/sites/{{site_id}}",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update status",
							"item": [
								{
									"name": "PATCH Site Status Validation Scenario",
									"item": [
										{
											"name": "Request headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:abc",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:abc"
													]
												}
											},
											"response": []
										},
										{
											"name": "No matching path params",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id If-Match]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site Status URL}}",
													"host": [
														"{{PATCH Site Status URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:abc",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:abc"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID header not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:abc",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:abc"
													]
												}
											},
											"response": []
										},
										{
											"name": "PATH param not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request url path, no matching path params found in path : /sites/s12345\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status 'status' received in the request\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:status",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status transition active",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status transition received in the request. The site status cannot be changed from draft to active status\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:active",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:active"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status transition to inactive",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status transition received in the request. The site status cannot be changed from draft to inactive status\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:inactive",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:inactive"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status transition to deprovisioning",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status transition received in the request. The site status cannot be changed from draft to deprovisioning status\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:deprovisioning",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:deprovisioning"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status transition to provisioning-failed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status transition received in the request. The site status cannot be changed from draft to provisioning-failed status\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:provisioning-failed",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:provisioning-failed"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid status transition to deprecated",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Invalid status transition received in the request. The site status cannot be changed from draft to deprecated status\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "{{new_site_etag}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{new_site_id}}:deprecated",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}:deprecated"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "If-Match",
														"value": "abcd",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:provisioning",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:provisioning"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "If-Match",
														"value": "abcd"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:provisioning",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:provisioning"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Update site status to provisioning",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let status = pm.response.headers.get('status')",
															"pm.test(\"Site status code is correct\", function () {",
															"    status == \"provisioning\"",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "text"
													},
													{
														"key": "If-Match",
														"value": "{{patch_etag}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:provisioning",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}:provisioning"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Audit",
							"item": [
								{
									"name": "GET Site Audit Validation Scenarios",
									"item": [
										{
											"name": "Required headers and query params absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													]
												}
											},
											"response": []
										},
										{
											"name": "one required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "",
														"value": "",
														"type": "default",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "abc",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU=",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header invalid base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header - ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "-10",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "200",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}"
													},
													{
														"key": "page_size",
														"value": "2"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Site audit Logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var jsonData = pm.response.json();",
															"    var end = false",
															"    if (jsonData.length == 0 || pm.response.headers.get('next_page_token') == undefined){",
															"        end = true",
															"    } else {",
															"        for (var i = 0; i < jsonData.length; i++) { ",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(jsonData[i].changed_at.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(['create','update','deactivated']).contains(jsonData[i].change_type)",
															"        }",
															"    }",
															"    if (!end) {",
															"        postman.setNextRequest(\"Get Site audit Logs\")",
															"        pm.collectionVariables.set(\"audit_page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/{{site_id}}/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"auditLogs"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Site Lifecycle Validation",
							"item": [
								{
									"name": "1 Create Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"retailer_id\", locationHeader[2]);",
													"",
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"retailer_name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Create Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"site_id\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Create one more Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 39.6034810,\n        \"long\" : -119.6822510\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Get Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"site_id\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
													"pm.collectionVariables.set(\"site_name\", pm.response.json().name);",
													"",
													"",
													"",
													"",
													"pm.test(\"Validate POST and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"post_etag\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{GET Site URL}}/sites/{{site_id}}",
											"host": [
												"{{GET Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Get Sites",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var sites = pm.response.json();",
													"    var found = false",
													"    for (var i = 0; i < sites.length; i++) { ",
													"        if (sites[i].id == pm.collectionVariables.get(\"site_id\")){",
													"            found = true",
													"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"post_etag\"));",
													"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
													"            pm.expect(sites[i].id).to.eql(pm.collectionVariables.get(\"site_id\"));",
													"            const created_time = sites[i].created_time;",
													"            const updated_time = sites[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(sites[i].created_by).not.to.be.empty;",
													"            pm.expect(sites[i].updated_time).not.to.be.empty;",
													"            pm.expect(sites[i].name).not.to.be.empty;",
													"            pm.expect(sites[i].etag).not.to.be.empty;",
													"            console.log(\"Found\")",
													"            break;",
													"        } else {",
													"            found = false",
													"        }",
													"    }",
													"    if (!found) {",
													"        postman.setNextRequest(\"5 Get Sites\")",
													"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{GET Sites URL}}/sites",
											"host": [
												"{{GET Sites URL}}"
											],
											"path": [
												"sites"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Create site with same name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{site_name}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Patch site with same name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 422\", function () {",
													"    pm.response.to.have.status(422);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"already exists\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "If-Match",
												"value": "{{get_etag}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{site_name}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Site URL}}/sites/{{site_id}}",
											"host": [
												"{{PATCH Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "8  Patch site name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "If-Match",
												"value": "{{get_etag}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Site URL}}/sites/{{site_id}}",
											"host": [
												"{{PATCH Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "9  Patch site location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"location\" : {\n        \"lat\" : 55.394,\n        \"long\" : 33.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Site URL}}/sites/{{site_id}}",
											"host": [
												"{{PATCH Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "10  Patch site name and location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{PATCH Site URL}}/sites/{{site_id}}",
											"host": [
												"{{PATCH Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "11 Get site after patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"site_id\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"});",
													"",
													"pm.collectionVariables.set(\"get_etag\", pm.response.headers.get('etag'));",
													"pm.collectionVariables.set(\"site_name\", pm.response.json().name);",
													"",
													"",
													"",
													"",
													"pm.test(\"Validate PATCH and GET Etag are equal\", function () {",
													"    pm.expect(pm.collectionVariables.get(\"get_etag\")).to.eql(pm.collectionVariables.get(\"patch_etag\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{GET Site URL}}/sites/{{site_id}}",
											"host": [
												"{{GET Site URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "12 Get sites after patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var sites = pm.response.json();",
													"    var found = false",
													"    for (var i = 0; i < sites.length; i++) { ",
													"        if (sites[i].id == pm.collectionVariables.get(\"site_id\")){",
													"            found = true",
													"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"patch_etag\"));",
													"            pm.expect(sites[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
													"            pm.expect(sites[i].id).to.eql(pm.collectionVariables.get(\"site_id\"));",
													"            const created_time = sites[i].created_time;",
													"            const updated_time = sites[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(sites[i].created_by).not.to.be.empty;",
													"            pm.expect(sites[i].updated_time).not.to.be.empty;",
													"            pm.expect(sites[i].name).not.to.be.empty;",
													"            pm.expect(sites[i].etag).not.to.be.empty;",
													"            console.log(\"Found\")",
													"            break;",
													"        } else {",
													"            found = false",
													"            console.log(\"not Found\")",
													"        }",
													"    }",
													"    if (!found) {",
													"        postman.setNextRequest(\"12 Get sites after patch\")",
													"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{GET Sites URL}}/sites",
											"host": [
												"{{GET Sites URL}}"
											],
											"path": [
												"sites"
											]
										}
									},
									"response": []
								},
								{
									"name": "13 Update site status to provisioning",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"let status = pm.response.headers.get('status')",
													"pm.test(\"Site status code is correct\", function () {",
													"    status == \"provisioning\"",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:provisioning",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:provisioning"
											]
										}
									},
									"response": []
								},
								{
									"name": "14 Update site status to provisioning-failed",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:provisioning-failed",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:provisioning-failed"
											]
										}
									},
									"response": []
								},
								{
									"name": "15 Update site status to provisioning",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:provisioning",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:provisioning"
											]
										}
									},
									"response": []
								},
								{
									"name": "16 Update site status to inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:inactive",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:inactive"
											]
										}
									},
									"response": []
								},
								{
									"name": "17 Update site status to active",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:active",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:active"
											]
										}
									},
									"response": []
								},
								{
									"name": "18 Update site status to inactive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:inactive",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:inactive"
											]
										}
									},
									"response": []
								},
								{
									"name": "19 Update site status to deprovisioning",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:deprovisioning",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:deprovisioning"
											]
										}
									},
									"response": []
								},
								{
									"name": "20 Update site status to deprecated",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"patch_etag\", pm.response.headers.get('etag'));",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "If-Match",
												"value": "{{patch_etag}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{PATCH Site Status URL}}/sites/{{site_id}}:deprecated",
											"host": [
												"{{PATCH Site Status URL}}"
											],
											"path": [
												"sites",
												"{{site_id}}:deprecated"
											]
										}
									},
									"response": []
								},
								{
									"name": "21 END unset all environment variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"audit_page_token\");",
													"pm.collectionVariables.unset(\"retailer_name\");",
													"pm.collectionVariables.unset(\"retailer_id\");",
													"pm.collectionVariables.unset(\"site_id\");",
													"pm.collectionVariables.unset(\"post_etag\");",
													"pm.collectionVariables.unset(\"get_etag\");",
													"pm.collectionVariables.unset(\"patch_etag\");",
													"pm.collectionVariables.unset(\"delete_etag\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "{{API_VERSION}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Retailers URL}}/retailers",
											"host": [
												"{{GET Retailers URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"API_VERSION\",\"v1\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "v2",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "POST site validation",
									"item": [
										{
											"name": "Accept-Version header value incorrect",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "GET Site Validation scenarios",
									"item": [
										{
											"name": "Accept-Version header value incorrect",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site URL}}/sites/s12345",
													"host": [
														"{{GET Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All",
							"item": [
								{
									"name": "GET Sites Validation Scenarios",
									"item": [
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Sites URL}}/sites",
													"host": [
														"{{GET Sites URL}}"
													],
													"path": [
														"sites"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "PATCH Site Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site URL}}/sites/s12345",
													"host": [
														"{{PATCH Site URL}}"
													],
													"path": [
														"sites",
														"s12345"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Update Status",
							"item": [
								{
									"name": "PATCH Site Status Validation Scenario",
									"item": [
										{
											"name": "Accept-Version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\",\\\"Request does not have the required headers : [If-Match]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "{{API_VERSION}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{PATCH Site Status URL}}/sites/s12345:provisioing",
													"host": [
														"{{PATCH Site Status URL}}"
													],
													"path": [
														"sites",
														"s12345:provisioing"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get Audit",
							"item": [
								{
									"name": "GET Site Audit Validation Scenarios",
									"item": [
										{
											"name": "Accept-Version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v2",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Site Audit URL}}/sites/s12345/auditLogs",
													"host": [
														"{{GET Site Audit URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"auditLogs"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"API_VERSION\",\"v2\")"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Spokes",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "Pre test",
							"item": [
								{
									"name": "1 Create Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"retailer_name\");",
													"",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"new_retailer_id\", locationHeader[2]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Create Site",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"new_site_id\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{new_retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "POST Spoke Validaton Scenario",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.collectionVariables.unset(\"page_token\");",
															"pm.collectionVariables.unset(\"page_token_2\");",
															"pm.collectionVariables.unset(\"page_token_3\");",
															"pm.collectionVariables.unset(\"retailer_name\");",
															"pm.collectionVariables.unset(\"retailer_id\");",
															"pm.collectionVariables.unset(\"post_etag\");",
															"pm.collectionVariables.unset(\"get_etag\");",
															"pm.collectionVariables.unset(\"patch_etag\");",
															"pm.collectionVariables.unset(\"delete_etag\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "No matching path param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\",\\\"Invalid request url path, no matching path params found in path : /\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{POST Spoke URL}}",
													"host": [
														"{{POST Spoke URL}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-Version header value absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID missing in header",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "No POST Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"EOF\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Empty JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"Empty JSON received, please input valid JSON in body\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}"
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid JSON in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Please input correct JSON in request body\\\",\\\"errors\\\":[\\\"invalid character 'n' looking for beginning of object key string\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    name: invalid\n}"
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Disallowed Fields in POST body",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request body validation failed\\\",\\\"errors\\\":[\\\"Key: 'Spoke.ID' Error:Field validation for 'ID' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.CreatedBy' Error:Field validation for 'CreatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.UpdatedBy' Error:Field validation for 'UpdatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.DeactivatedBy' Error:Field validation for 'DeactivatedBy' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.CreatedTime' Error:Field validation for 'CreatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.UpdatedTime' Error:Field validation for 'UpdatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.DeactivatedTime' Error:Field validation for 'DeactivatedTime' failed on the 'disallowed' tag\\\",\\\"Key: 'Spoke.ETag' Error:Field validation for 'ETag' failed on the 'disallowed' tag\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"id\": \"p12345\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    },\n    \"created_by\": \"test\",\n    \"updated_by\": \"test\",\n    \"deactivated_by\": \"test\",\n    \"created_time\": \"{{$isoTimestamp}}\",\n    \"updated_time\": \"{{$isoTimestamp}}\",\n    \"deactivated_time\": \"{{$isoTimestamp}}\",\n    \"etag\": \"etag\"\n}"
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid retailer ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Incorrect value for header retailer_id\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "invalid",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Create spoke",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Last-Modified is present\", function () {",
															"    pm.response.to.have.header(\"Last-Modified\");",
															"});",
															"",
															"pm.test(\"Location is present\", function () {",
															"    pm.response.to.have.header(\"Location\");",
															"});",
															"",
															"let locationHeader = pm.response.headers.get('location').split('/')",
															"",
															"pm.collectionVariables.set(\"spoke_id\", locationHeader[2]);",
															"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\" : \"spoke {{$randomCity}}\",\n    \"location\" : {  \n        \"lat\" : 45.394, \n        \"long\" : 23.844\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{new_site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "Get Spoke Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Retailer ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID r12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid spoke ID passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Spoke ID invalidID not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/invalidID",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"invalidID"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/s12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"s12345"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get Spoke",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"Response body validation\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"spoke_id\"));",
															"    const created_time = jsonData.created_time;",
															"    const updated_time = jsonData.updated_time;",
															"    const Today = new Date();",
															"    const TodayISO = Today.toISOString().split('T')[0]",
															"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"    pm.expect(jsonData.created_by).not.to.be.empty;",
															"    pm.expect(jsonData.updated_time).not.to.be.empty;",
															"    pm.expect(jsonData.name).not.to.be.empty;",
															"    pm.expect(jsonData.retailer_id).not.to.be.empty;",
															"    pm.expect(jsonData.timezone).not.to.be.empty;",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/{{spoke_id}}",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"{{spoke_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all In context of Retailer",
							"item": [
								{
									"name": "GET Spokes in context of Retailer Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "",
														"value": "",
														"type": "default",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Page_size header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "invalid",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalide base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU=",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "200",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header -ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "default"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "default"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "default"
													},
													{
														"key": "page_size",
														"value": "-10",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_size",
														"value": "2"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get All Spokes in context of retailer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var spokes = pm.response.json();",
															"    var found = false",
															"    for (var i = 0; i < spokes.length; i++) { ",
															"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id\")){",
															"            found = true",
															"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag\"));",
															"           // pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
															"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id\"));",
															"            const created_time = spokes[i].created_time;",
															"            const updated_time = spokes[i].updated_time;",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(spokes[i].created_by).not.to.be.empty;",
															"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
															"            pm.expect(spokes[i].name).not.to.be.empty;",
															"            pm.expect(spokes[i].etag).not.to.be.empty;",
															"            console.log(\"Found\")",
															"            break;",
															"        } else {",
															"            found = false",
															"        }",
															"    }",
															"    if (!found) {",
															"        postman.setNextRequest(\"Get All Spokes\")",
															"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get all In context of Site",
							"item": [
								{
									"name": "GET Spokes in context of Site Validation Scenarios",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID r12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Incorrect value for header retailer_id\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Page_size header invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : page_size\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_size",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header expired",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Header page_token expired : MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA3MDU2ODo6OjqiePc+UU1FVfcwyXX6EUpx"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalide base 64",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid header value, unable to decrypt header : page_token\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_token",
														"value": "MTY2ODA6Ojo6RW5jb2Rlxsvsc"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token header : MTY2ODBFbmNvZGU=\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_token",
														"value": "MTY2ODBFbmNvZGU="
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_token Header  invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid page_token : aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_token",
														"value": "aW52YWxpZGtleTo6OjoxNDc1MjM2OTgyMzYxMjU2"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header overlimit",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_size",
														"value": "200"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "page_size Header -ve check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"page_size must be between 2 to 100\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "page_size",
														"value": "-10"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Get All Spokes in context of site",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Iterate if not found\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"    var spokes = pm.response.json();",
															"    var found = false",
															"    for (var i = 0; i < spokes.length; i++) { ",
															"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id\")){",
															"            found = true",
															"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag\"));",
															"           // pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"get_etag\"));",
															"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id\"));",
															"            const created_time = spokes[i].created_time;",
															"            const updated_time = spokes[i].updated_time;",
															"            const Today = new Date();",
															"            const TodayISO = Today.toISOString().split('T')[0]",
															"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
															"            pm.expect(spokes[i].created_by).not.to.be.empty;",
															"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
															"            pm.expect(spokes[i].name).not.to.be.empty;",
															"            pm.expect(spokes[i].etag).not.to.be.empty;",
															"            console.log(\"Found\")",
															"            break;",
															"        } else {",
															"            found = false",
															"        }",
															"    }",
															"    if (!found) {",
															"        postman.setNextRequest(\"Get All Spokes\")",
															"        pm.collectionVariables.set(\"page_token\", pm.response.headers.get('next_page_token'));",
															"    }",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/{{new_site_id}}/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Attach Spoke to a Site",
							"item": [
								{
									"name": "PATCH Attach spoke to a site",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept-version Header value invalid",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Retailer ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Retailer ID r12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Retailer ID not passed",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Incorrect value for header retailer_id\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "invalid"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Spoke ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Spoke ID p12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/{{new_site_id}}/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid attach operation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Invalid request url path, no matching path params found in path\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/{{new_site_id}}/spokes/{{spoke_id}}:attached",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes",
														"{{spoke_id}}:attached"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Re attaching same site and spoke",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"is already attached to site\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/{{new_site_id}}/spokes/{{spoke_id}}:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes",
														"{{spoke_id}}:attach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/{{new_site_id}}/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "1 Create Site",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"ETag is present\", function () {",
															"    pm.response.to.have.header(\"ETag\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Last-Modified is present\", function () {",
															"    pm.response.to.have.header(\"Last-Modified\");",
															"});",
															"",
															"pm.test(\"Location is present\", function () {",
															"    pm.response.to.have.header(\"Location\");",
															"});",
															"",
															"let locationHeader = pm.response.headers.get('location').split('/')",
															"",
															"pm.collectionVariables.set(\"new_site_id_attach\", locationHeader[2]);",
															"pm.collectionVariables.set(\"post_etag_attach\", pm.response.headers.get('etag'));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{POST Site URL}}/sites",
													"host": [
														"{{POST Site URL}}"
													],
													"path": [
														"sites"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "PATCH Attach Spoke to Site",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageToken = pm.collectionVariables.get(\"page_token\");",
															"if( !pageToken) {",
															"   pm.collectionVariables.set(\"page_token\",\"\");",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Body matches string\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"attached successfully to site\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/{{new_site_id_attach}}/spokes/{{spoke_id}}:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id_attach}}",
														"spokes",
														"{{spoke_id}}:attach"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Detach spoke from a site",
							"item": [
								{
									"name": "PATCH Spokes Detach Validations",
									"item": [
										{
											"name": "Required headers absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version X-Correlation-ID retailer_id]\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:detach"
													]
												}
											},
											"response": []
										},
										{
											"name": "One required header absent",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Request does not have the required headers : [Accept-Version]\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:detach"
													],
													"query": [
														{
															"key": "",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "No matching path param",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request url path, no matching path params found in path : /sites/s12345/spokes/p12345\\\"]}\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													},
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid retailer ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Incorrect value for header retailer_id\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "invalid"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:detach"
													]
												}
											},
											"response": []
										},
										{
											"name": "site ID not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":404,\\\"message\\\":\\\"Site ID s12345 not found\\\"}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:detach"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid method request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Invalid request method, send request with correct method\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "v1"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"site_name\",\n    \"location\" : {  \n        \"lat\" : {{$randomLatitude}}, \n        \"long\" : {{$randomLongitude}}\n    }\n}"
												},
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/s12345/spokes/p12345:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:detach"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Positive",
									"item": [
										{
											"name": "Detach site from spoke",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "v1",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "{{new_retailer_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Detach URL}}/sites/{{new_site_id}}/spokes/{{spoke_id}}:detach",
													"host": [
														"{{PATCH Spoke Detach URL}}"
													],
													"path": [
														"sites",
														"{{new_site_id}}",
														"spokes",
														"{{spoke_id}}:detach"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Spokes lifecycle validation",
							"item": [
								{
									"name": "1 Create Retailer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"retailer_id\", locationHeader[2]);",
													"",
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"retailer_name\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCity}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Retailer URL}}/retailers",
											"host": [
												"{{POST Retailer URL}}"
											],
											"path": [
												"retailers"
											]
										}
									},
									"response": []
								},
								{
									"name": "2 Create Site 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"site_id_1\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "3 Create Site 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"site_id_2\", locationHeader[2]);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Site {{$randomFirstName}}\",\n    \"retailer_site_id\" : \"{{$randomAlphaNumeric}}\",\n    \"location\" : {\n        \"lat\" : 45.394,\n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Site URL}}/sites",
											"host": [
												"{{POST Site URL}}"
											],
											"path": [
												"sites"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Create spoke 1 for Site 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"spoke_id_1\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag_1\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"spoke {{$randomCity}}\",\n    \"location\" : {  \n        \"lat\" : 45.394, \n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Spoke URL}}/sites/{{site_id_1}}/spokes",
											"host": [
												"{{POST Spoke URL}}"
											],
											"path": [
												"sites",
												"{{site_id_1}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Get Spoke 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"spoke_id_1\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"    pm.expect(jsonData.retailer_id).not.to.be.empty;",
													"    pm.expect(jsonData.timezone).not.to.be.empty;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "text"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Spoke URL}}/spokes/{{spoke_id_1}}",
											"host": [
												"{{GET Spoke URL}}"
											],
											"path": [
												"spokes",
												"{{spoke_id_1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "6 Create spoke 2 for Site 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"spoke_id_2\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag_2\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "default"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "default"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"spoke {{$randomCity}}\",\n    \"location\" : {  \n        \"lat\" : 45.394, \n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Spoke URL}}/sites/{{site_id_1}}/spokes",
											"host": [
												"{{POST Spoke URL}}"
											],
											"path": [
												"sites",
												"{{site_id_1}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Create spoke 3 for Site 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"spoke_id_3\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag_3\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"spoke {{$randomCity}}\",\n    \"location\" : {  \n        \"lat\" : 45.394, \n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Spoke URL}}/sites/{{site_id_2}}/spokes",
											"host": [
												"{{POST Spoke URL}}"
											],
											"path": [
												"sites",
												"{{site_id_2}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "5 Get Spoke 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"Response body validation\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"spoke_id_3\"));",
													"    const created_time = jsonData.created_time;",
													"    const updated_time = jsonData.updated_time;",
													"    const Today = new Date();",
													"    const TodayISO = Today.toISOString().split('T')[0]",
													"    pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"    pm.expect(jsonData.created_by).not.to.be.empty;",
													"    pm.expect(jsonData.updated_time).not.to.be.empty;",
													"    pm.expect(jsonData.name).not.to.be.empty;",
													"    pm.expect(jsonData.retailer_id).not.to.be.empty;",
													"    pm.expect(jsonData.timezone).not.to.be.empty;",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											}
										],
										"url": {
											"raw": "{{GET Spoke URL}}/spokes/{{spoke_id_3}}",
											"host": [
												"{{GET Spoke URL}}"
											],
											"path": [
												"spokes",
												"{{spoke_id_3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "4 Create spoke 4 for Site 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"ETag is present\", function () {",
													"    pm.response.to.have.header(\"ETag\");",
													"});",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Last-Modified is present\", function () {",
													"    pm.response.to.have.header(\"Last-Modified\");",
													"});",
													"",
													"pm.test(\"Location is present\", function () {",
													"    pm.response.to.have.header(\"Location\");",
													"});",
													"",
													"let locationHeader = pm.response.headers.get('location').split('/')",
													"",
													"pm.collectionVariables.set(\"spoke_id_4\", locationHeader[2]);",
													"pm.collectionVariables.set(\"post_etag_4\", pm.response.headers.get('etag'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"spoke {{$randomCity}}\",\n    \"location\" : {  \n        \"lat\" : 45.394, \n        \"long\" : 23.844\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{POST Spoke URL}}/sites/{{site_id_2}}/spokes",
											"host": [
												"{{POST Spoke URL}}"
											],
											"path": [
												"sites",
												"{{site_id_2}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "7 Get All Spokes in context of retailer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var spokes = pm.response.json();",
													"    var found_1 = false",
													"    var found_2 = false",
													"    var found_3 = false",
													"    var found_4 = false",
													"    for (var i = 0; i < spokes.length; i++) { ",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_1\")){",
													"            found_1 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_1\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_1\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 1\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_2\")){",
													"            found_2 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_2\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_2\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 2\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_3\")){",
													"            found_3 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_3\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_3\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 3\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_4\")){",
													"            found_4 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_4\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_4\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 4\")",
													"        }",
													"    }",
													"    if (!found_1 && !found_2 && !found_3 && !found_4) {",
													"        console.log(\"All created spokes not found\");",
													"        throw new Error('All created spokes not found');",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "text"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Spokes URL}}/spokes",
											"host": [
												"{{GET Spokes URL}}"
											],
											"path": [
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Spokes in context of site 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var spokes = pm.response.json();",
													"    var found_1 = false",
													"    var found_2 = false",
													"    for (var i = 0; i < spokes.length; i++) { ",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_1\")){",
													"            found_1 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_1\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_1\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 1\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_2\")){",
													"            found_2 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_2\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_2\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 2\")",
													"        }",
													"    }",
													"    if (!found_1 && !found_2) {",
													"        console.log(\"All created spokes not found for site 1\");",
													"        throw new Error('All created spokes not found for site 1');",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{GET Site Spokes URL}}/sites/{{site_id_1}}/spokes",
											"host": [
												"{{GET Site Spokes URL}}"
											],
											"path": [
												"sites",
												"{{site_id_1}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Spokes in context of site 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var spokes = pm.response.json();",
													"    var found_1 = false",
													"    var found_2 = false",
													"    for (var i = 0; i < spokes.length; i++) { ",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_3\")){",
													"            found_1 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_3\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_3\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 1\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_4\")){",
													"            found_2 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_4\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_4\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 2\")",
													"        }",
													"    }",
													"    if (!found_1 && !found_2) {",
													"       console.log(\"All created spokes not found for site 2\");",
													"        throw new Error('All created spokes not found for site 2');",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{GET Site Spokes URL}}/sites/{{site_id_2}}/spokes",
											"host": [
												"{{GET Site Spokes URL}}"
											],
											"path": [
												"sites",
												"{{site_id_2}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH Attach Spoke 1 to Site 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"attached successfully to site\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{PATCH Spoke Attach URL}}/sites/{{site_id_2}}/spokes/{{spoke_id_1}}:attach",
											"host": [
												"{{PATCH Spoke Attach URL}}"
											],
											"path": [
												"sites",
												"{{site_id_2}}",
												"spokes",
												"{{spoke_id_1}}:attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH Attach Spoke 3 to Site 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"attached successfully to site\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{PATCH Spoke Attach URL}}/sites/{{site_id_1}}/spokes/{{spoke_id_3}}:attach",
											"host": [
												"{{PATCH Spoke Attach URL}}"
											],
											"path": [
												"sites",
												"{{site_id_1}}",
												"spokes",
												"{{spoke_id_3}}:attach"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Spokes in context of site 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var spokes = pm.response.json();",
													"    var found_1 = false",
													"    var found_2 = false",
													"    var found_3 = false",
													"    for (var i = 0; i < spokes.length; i++) { ",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_1\")){",
													"            found_1 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_1\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_1\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 1\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_2\")){",
													"            found_2 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_2\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_2\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 2\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_3\")){",
													"            found_3 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_3\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_3\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 3\")",
													"        }",
													"    }",
													"    if (!found_1 && !found_2 && !found3) {",
													"        console.log(\"All created spokes not found for site 1\");",
													"        throw new Error('All created spokes not found for site 1');",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{GET Site Spokes URL}}/sites/{{site_id_1}}/spokes",
											"host": [
												"{{GET Site Spokes URL}}"
											],
											"path": [
												"sites",
												"{{site_id_1}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Spokes in context of site 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageToken = pm.collectionVariables.get(\"page_token\");",
													"if( !pageToken) {",
													"   pm.collectionVariables.set(\"page_token\",\"\");",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"",
													"pm.test(\"X-Correlation-ID is present\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"});",
													"",
													"pm.test(\"Iterate if not found\", function () {",
													"    pm.response.to.have.header(\"X-Correlation-ID\");",
													"    var spokes = pm.response.json();",
													"    var found_1 = false ",
													"    var found_3 = false",
													"    var found_4 = false",
													"    for (var i = 0; i < spokes.length; i++) { ",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_1\")){",
													"            found_1 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_1\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_1\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 1\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_3\")){",
													"            found_3 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_3\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_3\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 3\")",
													"        }",
													"        if (spokes[i].id == pm.collectionVariables.get(\"spoke_id_4\")){",
													"            found_4 = true",
													"            pm.expect(spokes[i].etag).to.eql(pm.collectionVariables.get(\"post_etag_4\"));",
													"            pm.expect(spokes[i].id).to.eql(pm.collectionVariables.get(\"spoke_id_4\"));",
													"            const created_time = spokes[i].created_time;",
													"            const updated_time = spokes[i].updated_time;",
													"            const Today = new Date();",
													"            const TodayISO = Today.toISOString().split('T')[0]",
													"            pm.expect(created_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(updated_time.substr(0,10)).to.equal(TodayISO);",
													"            pm.expect(spokes[i].created_by).not.to.be.empty;",
													"            pm.expect(spokes[i].updated_time).not.to.be.empty;",
													"            pm.expect(spokes[i].name).not.to.be.empty;",
													"            pm.expect(spokes[i].etag).not.to.be.empty;",
													"            console.log(\"Found Spoke 4\")",
													"        }",
													"    }",
													"    if (!found_3 && !found_4 && !found_1) {",
													"       console.log(\"All created spokes not found for site 2\");",
													"        throw new Error('All created spokes not found for site 2');",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}"
											},
											{
												"key": "Accept-Version",
												"value": "v1"
											},
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}"
											}
										],
										"url": {
											"raw": "{{GET Site Spokes URL}}/sites/{{site_id_2}}/spokes",
											"host": [
												"{{GET Site Spokes URL}}"
											],
											"path": [
												"sites",
												"{{site_id_2}}",
												"spokes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unset all variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.collectionVariables.unset(\"page_token\");",
													"pm.collectionVariables.unset(\"page_token_2\");",
													"pm.collectionVariables.unset(\"page_token_3\");",
													"pm.collectionVariables.unset(\"audit_page_token\");",
													"pm.collectionVariables.unset(\"retailer_name\");",
													"pm.collectionVariables.unset(\"retailer_id\");",
													"pm.collectionVariables.unset(\"site_id\");",
													"pm.collectionVariables.unset(\"site_id_1\");",
													"pm.collectionVariables.unset(\"site_id_2\");",
													"pm.collectionVariables.unset(\"post_etag\");",
													"pm.collectionVariables.unset(\"spoke_id_1\");",
													"pm.collectionVariables.unset(\"spoke_id_2\");",
													"pm.collectionVariables.unset(\"spoke_id_3\");",
													"pm.collectionVariables.unset(\"spoke_id_4\");",
													"pm.collectionVariables.unset(\"post_etag_1\");",
													"pm.collectionVariables.unset(\"post_etag_2\");",
													"pm.collectionVariables.unset(\"post_etag_3\");",
													"pm.collectionVariables.unset(\"post_etag_4\");",
													"pm.collectionVariables.unset(\"get_etag\");",
													"pm.collectionVariables.unset(\"patch_etag\");",
													"pm.collectionVariables.unset(\"delete_etag\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "retailer_id",
												"value": "{{retailer_id}}",
												"type": "text"
											},
											{
												"key": "Accept-Version",
												"value": "v1",
												"type": "text"
											},
											{
												"key": "X-Correlation-ID",
												"value": "{{$guid}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{GET Spoke URL}}/spokes/{{spoke_id}}",
											"host": [
												"{{GET Spoke URL}}"
											],
											"path": [
												"spokes",
												"{{spoke_id}}"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												},
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "v2",
					"item": [
						{
							"name": "Create",
							"item": [
								{
									"name": "Post spoke validation",
									"item": [
										{
											"name": "Accept version header incorrect value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{POST Spoke URL}}/sites/{{site_id}}/spokes",
													"host": [
														"{{POST Spoke URL}}"
													],
													"path": [
														"sites",
														"{{site_id}}",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All in context of retailer",
							"item": [
								{
									"name": "Get All in context of retailer validation",
									"item": [
										{
											"name": "Accept version header incorrect value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}",
														"type": "text"
													},
													{
														"key": "Accept-Version",
														"value": "invalid",
														"type": "text"
													},
													{
														"key": "retailer_id",
														"value": "r12345",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{GET Spokes URL}}/spokes",
													"host": [
														"{{GET Spokes URL}}"
													],
													"path": [
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get All in context of site",
							"item": [
								{
									"name": "Get All in context of site",
									"item": [
										{
											"name": "Accept version header incorrect value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{GET Site Spokes URL}}/sites/s12345/spokes",
													"host": [
														"{{GET Site Spokes URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Get",
							"item": [
								{
									"name": "Get spoke validation",
									"item": [
										{
											"name": "Accept version header incorrect value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{GET Spoke URL}}/spokes/p12345",
													"host": [
														"{{GET Spoke URL}}"
													],
													"path": [
														"spokes",
														"p12345"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PATCH Attach Spoke",
							"item": [
								{
									"name": "PATCH Attach Spoke Validation",
									"item": [
										{
											"name": "Accept version header incorrect value",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Body is correct\", function () {",
															"    pm.response.to.have.body(\"{\\\"code\\\":400,\\\"message\\\":\\\"Request validation failed\\\",\\\"errors\\\":[\\\"Unsupported value for header : Accept-Version\\\"]}\");",
															"});",
															"",
															"pm.test(\"X-Correlation-ID is present\", function () {",
															"    pm.response.to.have.header(\"X-Correlation-ID\");",
															"});",
															"",
															"pm.test(\"Content-Type is present\", function () {",
															"    pm.response.to.have.header(\"Content-Type\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [
													{
														"key": "X-Correlation-ID",
														"value": "{{$guid}}"
													},
													{
														"key": "Accept-Version",
														"value": "invalid"
													},
													{
														"key": "retailer_id",
														"value": "r12345"
													}
												],
												"url": {
													"raw": "{{PATCH Spoke Attach URL}}/sites/s12345/spokes/p12345:attach",
													"host": [
														"{{PATCH Spoke Attach URL}}"
													],
													"path": [
														"sites",
														"s12345",
														"spokes",
														"p12345:attach"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{BEARERTOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API_VERSION",
			"value": "v1"
		},
		{
			"key": "new_retailer_id",
			"value": ""
		},
		{
			"key": "new_site_id",
			"value": ""
		},
		{
			"key": "new_site_etag",
			"value": ""
		},
		{
			"key": "site_name",
			"value": ""
		},
		{
			"key": "site_etag",
			"value": ""
		},
		{
			"key": "spoke_id",
			"value": ""
		},
		{
			"key": "new_site_id_attach",
			"value": ""
		},
		{
			"key": "post_etag_attach",
			"value": ""
		}
	]
}