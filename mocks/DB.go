// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	cloud "github.com/TakeoffTech/site-info-svc/common/cloud"

	firestore "cloud.google.com/go/firestore"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CheckSubDocuments provides a mock function with given fields: ctx, collectionPath, documentID
func (_m *DB) CheckSubDocuments(ctx context.Context, collectionPath string, documentID string) (bool, error) {
	ret := _m.Called(ctx, collectionPath, documentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, collectionPath, documentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, collectionPath, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, collectionPath, documentID
func (_m *DB) Delete(ctx context.Context, collectionPath string, documentID string) (bool, error) {
	ret := _m.Called(ctx, collectionPath, documentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, collectionPath, documentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, collectionPath, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: ctx, collectionPath, field, value
func (_m *DB) Exists(ctx context.Context, collectionPath string, field string, value string) (bool, error) {
	ret := _m.Called(ctx, collectionPath, field, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, collectionPath, field, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, collectionPath, field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsInCollectionGroup provides a mock function with given fields: ctx, collectionGroupID, field, value
func (_m *DB) ExistsInCollectionGroup(ctx context.Context, collectionGroupID string, field string, value string) (bool, error) {
	ret := _m.Called(ctx, collectionGroupID, field, value)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, collectionGroupID, field, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, collectionGroupID, field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, collectionPath, pageDetails, whereClauses
func (_m *DB) GetAll(ctx context.Context, collectionPath string, pageDetails cloud.Page, whereClauses []cloud.Where) ([]map[string]interface{}, string, error) {
	ret := _m.Called(ctx, collectionPath, pageDetails, whereClauses)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, cloud.Page, []cloud.Where) []map[string]interface{}); ok {
		r0 = rf(ctx, collectionPath, pageDetails, whereClauses)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, cloud.Page, []cloud.Where) string); ok {
		r1 = rf(ctx, collectionPath, pageDetails, whereClauses)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, cloud.Page, []cloud.Where) error); ok {
		r2 = rf(ctx, collectionPath, pageDetails, whereClauses)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: ctx, collectionPath, documentID, skipDeactivated
func (_m *DB) GetByID(ctx context.Context, collectionPath string, documentID string, skipDeactivated bool) (map[string]interface{}, error) {
	ret := _m.Called(ctx, collectionPath, documentID, skipDeactivated)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) map[string]interface{}); ok {
		r0 = rf(ctx, collectionPath, documentID, skipDeactivated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, collectionPath, documentID, skipDeactivated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, collectionPath, documentID, document
func (_m *DB) Save(ctx context.Context, collectionPath string, documentID string, document interface{}) (time.Time, error) {
	ret := _m.Called(ctx, collectionPath, documentID, document)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) time.Time); ok {
		r0 = rf(ctx, collectionPath, documentID, document)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, collectionPath, documentID, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, collectionPath, documentID, document
func (_m *DB) Update(ctx context.Context, collectionPath string, documentID string, document []firestore.Update) (time.Time, error) {
	ret := _m.Called(ctx, collectionPath, documentID, document)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []firestore.Update) time.Time); ok {
		r0 = rf(ctx, collectionPath, documentID, document)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []firestore.Update) error); ok {
		r1 = rf(ctx, collectionPath, documentID, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
